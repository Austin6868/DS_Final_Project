set.seed(1)
creditData=na.omit(read.csv ("credit_risk_dataset.csv", header = TRUE))
num_samples = dim(creditData)[1]
creditData$person_home_ownership <- factor(creditData$person_home_ownership)
creditData$loan_intent <- factor(creditData$loan_intent)
creditData$loan_grade <- factor(creditData$loan_grade)
creditData$cb_person_default_on_file <- factor(creditData$cb_person_default_on_file)
creditData$cb_person_default_on_file <- ifelse(creditData$cb_person_default_on_file == "Y", 1, 0)
print(head(creditData))
library(dplyr)
home_ownership_types <- creditData %>%
count(person_home_ownership)
print(home_ownership_types)
loan_intent <- creditData %>%
count(loan_intent)
print(loan_intent)
loan_grade <- creditData %>%
count(loan_grade)
print(loan_grade)
cb_person_default_on_file <- creditData %>%
count(cb_person_default_on_file)
print(cb_person_default_on_file)
## KNN
## loan status is Y
summary (creditData$person_home_ownership)
library(dummy)
# creating dummy variables
temp_ownership <- data.frame(person_home_ownership = creditData$person_home_ownership)
creditData <- cbind(creditData, dummy(temp_ownership))
creditData <- subset(creditData, select = -person_home_ownership)
temp_intent <- data.frame(intent = creditData$loan_intent)
creditData <- cbind(creditData, dummy(temp_intent))
creditData <- subset(creditData, select = -loan_intent)
temp_grade <- data.frame(grade = creditData$loan_grade)
creditData <- cbind(creditData, dummy(temp_grade))
creditData <- subset(creditData, select = -loan_grade)
creditData <- as.data.frame(sapply(creditData, function(x) as.numeric(as.character(x))))
creditData <- creditData
cor(creditData)
print(creditData)
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
svmModel <- svm(loan_status ~., data = trainingSet)
predictLabels <- predict (svmModel, testingSet)
print(svmModel)
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
svmModel <- svm(loan_status ~., data = trainingSet)
predictLabels <- predict (svmModel, testingSet)
print(svmModel)
print(predictLabels)
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
svmModel <- svm(loan_status ~., data = trainingSet)
predictLabels <- predict (svmModel, testingSet)
print(svmModel)
error = sum(predictLabels!=testingSet$loan_status)
mis_rate=error/num_samples
print(mis_rate)
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
svmModel <- svm(loan_status ~., data = trainingSet, )
predictLabels <- predict (svmModel, testingSet, kernel = linear, cost = 20)
print(svmModel)
error = sum(predictLabels!=testingSet$loan_status)
mis_rate=error/num_samples
print(mis_rate)
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
svmModel <- svm(loan_status ~., data = trainingSet, )
predictLabels <- predict (svmModel, testingSet, kernel = linear, cost = 20)
print(svmModel)
error = sum(predictLabels!=testingSet$loan_status)
mis_rate=error/num_samples
accuracy = 1- mis_rate
print(accuracy)
library(caret)
conf_matrix <- confusionMatrix(as.factor(predictLabels), as.factor(test_set$loan_status), positive = "1")
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
svmModel <- svm(loan_status ~., data = trainingSet, )
predictLabels <- predict (svmModel, testingSet, kernel = linear, cost = 20)
print(svmModel)
print(nrow(predictlabels))
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
svmModel <- svm(loan_status ~., data = trainingSet, )
predictLabels <- predict (svmModel, testingSet, kernel = linear, cost = 20)
print(svmModel)
print(nrow(predictLabels))
error = sum(predictLabels!=testingSet$loan_status)
mis_rate=error/num_samples
accuracy = 1- mis_rate
print(accuracy)
library(dplyr)
library(dummy)
library(FNN)
library(class)
library(caret)
library(ggplot2)
library(lattice)
library(kknn)
library(ROCR)
options(repos = c(CRAN = "https://cloud.r-project.org/"))
set.seed(1)
creditData=na.omit(read.csv ("credit_risk_dataset.csv", header = TRUE))
num_samples = dim(creditData)[1]
creditData$cb_person_default_on_file <- ifelse(creditData$cb_person_default_on_file == "Y", 1, 0)
creditData$cb_person_default_on_file <- factor(creditData$cb_person_default_on_file, levels = c(1, 0))
head(creditData)
home_ownership_types <- creditData %>%
count(person_home_ownership)
print(home_ownership_types)
loan_intent <- creditData %>%
count(loan_intent)
print(loan_intent)
loan_grade <- creditData %>%
count(loan_grade)
print(loan_grade)
cb_person_default_on_file <- creditData %>%
count(cb_person_default_on_file)
print(cb_person_default_on_file)
## loan status is Y
summary (creditData$person_home_ownership)
# creating dummy variables
temp_ownership <- data.frame(person_home_ownership = creditData$person_home_ownership)
creditData <- cbind(creditData, dummy(temp_ownership))
creditData <- subset(creditData, select = -person_home_ownership)
temp_intent <- data.frame(intent = creditData$loan_intent)
creditData <- cbind(creditData, dummy(temp_intent))
creditData <- subset(creditData, select = -loan_intent)
temp_grade <- data.frame(grade = creditData$loan_grade)
creditData <- cbind(creditData, dummy(temp_grade))
creditData <- subset(creditData, select = -loan_grade)
creditData <- as.data.frame(sapply(creditData, function(x) as.numeric(as.character(x))))
creditData <- creditData
# normalizing the data
creditData$person_age = (creditData$person_age-mean(creditData$person_age))/sd(creditData$person_age)
creditData$person_income = (creditData$person_income - mean(creditData$person_income))/sd(creditData$person_income)
creditData$person_emp_length = (creditData$person_emp_length - mean(creditData$person_emp_length))/sd(creditData$person_emp_length)
creditData$loan_amnt = (creditData$loan_amnt - mean(creditData$loan_amnt))/sd(creditData$loan_amnt)
creditData$loan_int_rate = (creditData$loan_int_rate - mean(creditData$loan_int_rate))/sd(creditData$loan_int_rate)
creditData$cb_person_cred_hist_length = (creditData$cb_person_cred_hist_length - mean(creditData$cb_person_cred_hist_length))/sd(creditData$cb_person_cred_hist_length)
bestK <- 0
minerrors <- Inf
# Initialize the progress bar
pbcount <- 0
pb <- txtProgressBar(min = 0, max = 100, style = 3)
for(iter in 55:65)
{
AllErrors=numeric(50)
for(fold in 1:10)
{
#Get Training at Testing sets
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
# Get the features of the training set
trainingfeatures <- subset(trainingSet, select=c(-loan_status))
# Get the labels of the training set
traininglabels <- trainingSet$loan_status
# Get the features of the testing set
testingfeatures <- subset(testingSet, select=c(-loan_status))
sizeTestSet = dim(testingSet)[1]
knnModel = kknn(loan_status ~. ,train = trainingSet,test = testingSet,k=iter)
predProbs <- fitted(knnModel)
predictions = ifelse(predProbs > 0.5, 1, 0)
error = sum(predictions != testingSet$loan_status)
mis_rate=error/sizeTestSet
AllErrors[fold] = mis_rate
# Setting the progress bar
pbcount <- pbcount + 1
setTxtProgressBar(pb, pbcount)
}
currError = mean(AllErrors)
if (currError < minerrors){
bestK = iter
minerrors = currError
}
}
close(pb)
print(bestK)
num_samples = dim(creditData)[1]
training=sample(1:num_samples,0.8*num_samples,replace=FALSE)
trainingsSet=subset(creditData[training,])
testing = setdiff(1:num_samples, training)
testingSet = subset(creditData[testing, ])
trainingfeature = subset(trainingsSet, select=c(-loan_status))
traininglabel =trainingsSet$loan_status
testingfeature = subset(testingSet, select=c(-loan_status))
knnModel <- kknn(loan_status ~. , train = trainingSet, test = testingSet, k=bestK)
predProbs <- fitted(knnModel)
predictionLabels = ifelse(predProbs > 0.5, 1, 0)
print(predictionLabels)
head(predictionLabels)
print(class(predictionLabels))
head(testingSet$loan_status)
sizeTestSet = dim(testingSet)[1]
error = sum(predictionLabels!=testingSet$loan_status)
mis_rate=error/sizeTestSet
print(mis_rate)
conf_matrix <- confusionMatrix(as.factor(predictionLabels), as.factor(testingSet$loan_status), positive = "1")
print(conf_matrix)
pred = prediction(predProbs, testingSet$loan_status)
pred_knn = pred
print(predProbs)
roc_obj = performance(pred, measure = "tpr", x.measure = "fpr")
auc_obj = performance(pred, measure = "auc")
plot(roc_obj, main = paste("Area under the curve:", round(auc_obj@y.values[[1]], 2)))
library(e1071)
library(ROCR)
options(repos = c(CRAN = "https://cloud.r-project.org/"))
set.seed(1)
creditData=na.omit(read.csv ("credit_risk_dataset.csv", header = TRUE))
num_rows = dim(creditData)[1]
creditData$person_home_ownership <- factor(creditData$person_home_ownership)
creditData$loan_intent <- factor(creditData$loan_intent)
creditData$loan_grade <- factor(creditData$loan_grade)
creditData$cb_person_default_on_file <- factor(creditData$cb_person_default_on_file)
creditData$cb_person_default_on_file <- ifelse(creditData$cb_person_default_on_file == "Y", 1, 0)
print(head(creditData))
library(dplyr)
home_ownership_types <- creditData %>%
count(person_home_ownership)
loan_intent <- creditData %>%
count(loan_intent)
loan_grade <- creditData %>%
count(loan_grade)
cb_person_default_on_file <- creditData %>%
count(cb_person_default_on_file)
## KNN
## loan status is Y
summary (creditData$person_home_ownership)
library(dummy)
# creating dummy variables
temp_ownership <- data.frame(person_home_ownership = creditData$person_home_ownership)
creditData <- cbind(creditData, dummy(temp_ownership))
creditData <- subset(creditData, select = -person_home_ownership)
temp_intent <- data.frame(intent = creditData$loan_intent)
creditData <- cbind(creditData, dummy(temp_intent))
creditData <- subset(creditData, select = -loan_intent)
temp_grade <- data.frame(grade = creditData$loan_grade)
creditData <- cbind(creditData, dummy(temp_grade))
creditData <- subset(creditData, select = -loan_grade)
creditData <- as.data.frame(sapply(creditData, function(x) as.numeric(as.character(x))))
creditData <- creditData
# normalizing the data
creditData$person_age = (creditData$person_age-mean(creditData$person_age))/sd(creditData$person_age)
creditData$person_income = (creditData$person_income - mean(creditData$person_income))/sd(creditData$person_income)
creditData$person_emp_length = (creditData$person_emp_length - mean(creditData$person_emp_length))/sd(creditData$person_emp_length)
creditData$loan_amnt = (creditData$loan_amnt - mean(creditData$loan_amnt))/sd(creditData$loan_amnt)
creditData$loan_int_rate = (creditData$loan_int_rate - mean(creditData$loan_int_rate))/sd(creditData$loan_int_rate)
creditData$cb_person_cred_hist_length = (creditData$cb_person_cred_hist_length - mean(creditData$cb_person_cred_hist_length))/sd(creditData$cb_person_cred_hist_length)
training <- sample(1:num_rows, 0.8 * num_rows, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_rows,training)
testingSet <- subset(creditData[testing, ])
trainingSet$loan_status <- as.factor(trainingSet$loan_status)
testingSet$loan_status <- as.factor(testingSet$loan_status)
svmModel <- svm(loan_status ~., data = trainingSet, kernel = "linear", cost = 20, probability = TRUE)
print(svmModel)
num_samples = dim(testingSet)[1]
predictLabels <-  predict(svmModel, testingSet, probability = TRUE)
predProbs <- attr(predictLabels, "probabilities")[,1]
error = sum(predictLabels!=testingSet$loan_status)
mis_rate=error/num_samples
accuracy = 1 - mis_rate
print(accuracy)
library(caret)
library(ggplot2)
library(lattice)
conf_matrix <- confusionMatrix(as.factor(predictLabels), as.factor(testingSet$loan_status), positive = "1")
print(conf_matrix)
pred = prediction(predProbs, testingSet$loan_status)
pred_svm = pred
roc_obj = performance(pred, measure = "tpr", x.measure = "fpr")
auc_obj = performance(pred, measure = "auc")
plot(roc_obj, main = paste("Area under the curve:", round(auc_obj@y.values[[1]], 2)))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(caret)
library(ROCR)
library(car)
library(dummy)
library(fastDummies)
LoanData = read.csv("credit_risk_dataset.csv")
head(LoanData)
LoanData = na.omit(LoanData)
LoanData$loan_percent_income = NULL
LoanData = dummy_cols(LoanData, select_columns = "person_home_ownership")
LoanData = dummy_cols(LoanData, select_columns = "loan_intent")
LoanData = dummy_cols(LoanData, select_columns = "loan_grade")
default_on_file = ifelse(LoanData$cb_person_default_on_file == "Y", 1, 0)
LoanData$person_home_ownership = NULL
LoanData$loan_intent = NULL
LoanData$loan_grade = NULL
LoanData$cb_person_default_on_file = NULL
head(LoanData)
set.seed(4469)
splitData = caret::createDataPartition(LoanData$loan_status, p = 0.8, list=FALSE)
trainData = LoanData[splitData,]
testData = LoanData[-splitData,]
trainDataLR = glm(loan_status ~ ., data=trainData, family=binomial(link="logit"))
summary(trainDataLR)
trainDataLR = glm(loan_status ~ person_age  + person_income + person_emp_length + loan_amnt + loan_int_rate + person_home_ownership_MORTGAGE + person_home_ownership_OWN + loan_intent_DEBTCONSOLIDATION + loan_intent_EDUCATION + loan_intent_HOMEIMPROVEMENT + loan_intent_MEDICAL + loan_intent_PERSONAL, data=trainData, family=binomial(link="logit"))
summary(trainDataLR)
pred_probs = predict(trainDataLR, testData, type = "response")
testData$Predicted = ifelse(pred_probs > 0.5, 1, 0)
testData$Predicted = factor(testData$Predicted, levels = c(0, 1))
testData$loan_status = factor(testData$loan_status, levels = c(0, 1))
head(testData)
confusionMatrix(testData$Predicted, testData$loan_status, positive = "1")
pred = prediction(pred_probs, testData$loan_status)
pred_logistic = pred
roc_obj = performance(pred, measure = "tpr", x.measure = "fpr")
auc_obj = performance(pred, measure = "auc")
plot(roc_obj, main = paste("Area under the curve:", round(auc_obj@y.values[[1]], 2)))
library(ROCR)
options(repos = c(CRAN = "https://cloud.r-project.org/"))
set.seed(43)
creditRiskData = na.omit(read.csv("credit_risk_dataset.csv"))
creditRiskData$cb_person_default_on_file <- ifelse(creditRiskData$cb_person_default_on_file == "Y", 1, 0)
creditRiskData$cb_person_default_on_file <- factor(creditRiskData$cb_person_default_on_file, levels = c(1, 0))
creditRiskData$loan_status <- factor(creditRiskData$loan_status, levels = c(1, 0))
head(creditRiskData)
split_index <- sample(1:nrow(creditRiskData), 0.8 * nrow(creditRiskData))
train_set <- creditRiskData[split_index, ]
test_set <- creditRiskData[-split_index, ]
library(randomForest)
rfCreditRiskModel <- randomForest(loan_status ~ ., data = train_set)
predProbs <- predict(rfCreditRiskModel, test_set, type = "prob")[,1]
predictions = ifelse(predProbs > 0.5, 1, 0)
print(rfCreditRiskModel)
print(nrow(predictions))
# building the confusion matrix
library(caret)
conf_matrix <- confusionMatrix(as.factor(predictions), as.factor(test_set$loan_status), positive = "1")
print(conf_matrix)
pred = prediction(predProbs, test_set$loan_status)
pred_rf = pred
roc_obj = performance(pred, measure = "tpr", x.measure = "fpr")
auc_obj = performance(pred, measure = "auc")
plot(roc_obj, main = paste("Area under the curve:", round(auc_obj@y.values[[1]], 2)))
library(ROCR)
perf_knn <- performance(pred_knn, "tpr", "fpr")
perf_rf <- performance(pred_rf, "tpr", "fpr")
perf_logistic <- performance(pred_logistic, "tpr", "fpr")
perf_svm <- performance(pred_svm, "tpr", "fpr")
auc_knn <- performance(pred_knn, measure = "auc")@y.values[[1]]
auc_rf <- performance(pred_rf, measure = "auc")@y.values[[1]]
auc_logistic <- performance(pred_logistic, measure = "auc")@y.values[[1]]
auc_svm <- performance(pred_svm, measure = "auc")@y.values[[1]]
plot(perf_knn, col = "red")
plot(perf_rf, col = "blue", add = TRUE)
plot(perf_logistic, col = "black", add = TRUE)
plot(perf_svm, col = "grey", add = TRUE)
legend("bottomright", legend = c("knn", "random forest", "logistic", "svm"),
col = c("red", "blue", "black", "grey"), lty = 1)
text(x = 0.3, y = 0.4, labels = paste("AUC-knn =", round(auc_knn, 2)), col = "red")
text(x = 0.3, y = 0.3, labels = paste("AUC-random forest =", round(auc_rf, 2)), col = "blue")
text(x = 0.3, y = 0.2, labels = paste("AUC-logistic =", round(auc_logistic, 2)), col = "black")
text(x = 0.3, y = 0.1, labels = paste("AUC-svm =", round(auc_svm, 2)), col = "grey")
knit_with_parameters("~/Library/CloudStorage/GoogleDrive-zzrthebeast@gmail.com/My Drive/CAREER/HBA2/DS/Final_Project/ROC.Rmd")
knit_with_parameters("~/Library/CloudStorage/GoogleDrive-zzrthebeast@gmail.com/My Drive/CAREER/HBA2/DS/Final_Project/ROC.Rmd")
View(perf_knn)
library(ROCR)
perf_knn <- performance(pred_knn, "tpr", "fpr")
perf_rf <- performance(pred_rf, "tpr", "fpr")
perf_logistic <- performance(pred_logistic, "tpr", "fpr")
perf_svm <- performance(pred_svm, "tpr", "fpr")
auc_knn <- performance(pred_knn, measure = "auc")@y.values[[1]]
auc_rf <- performance(pred_rf, measure = "auc")@y.values[[1]]
auc_logistic <- performance(pred_logistic, measure = "auc")@y.values[[1]]
auc_svm <- performance(pred_svm, measure = "auc")@y.values[[1]]
plot(perf_knn, col = "red")
plot(perf_rf, col = "blue", add = TRUE)
plot(perf_logistic, col = "black", add = TRUE)
plot(perf_svm, col = "grey", add = TRUE)
legend("bottomright", legend = c("knn", "random forest", "logistic", "svm"),
col = c("red", "blue", "black", "grey"), lty = 1)
text(x = 0.3, y = 0.4, labels = paste("AUC-knn =", round(auc_knn, 2)), col = "red")
text(x = 0.3, y = 0.3, labels = paste("AUC-random forest =", round(auc_rf, 2)), col = "blue")
text(x = 0.3, y = 0.2, labels = paste("AUC-logistic =", round(auc_logistic, 2)), col = "black")
text(x = 0.3, y = 0.1, labels = paste("AUC-svm =", round(auc_svm, 2)), col = "grey")
knit_with_parameters("~/Library/CloudStorage/GoogleDrive-zzrthebeast@gmail.com/My Drive/CAREER/HBA2/DS/Final_Project/ROC.Rmd")
knit_with_parameters("~/Library/CloudStorage/GoogleDrive-zzrthebeast@gmail.com/My Drive/CAREER/HBA2/DS/Final_Project/ROC.Rmd")
knit_with_parameters("~/Library/CloudStorage/GoogleDrive-zzrthebeast@gmail.com/My Drive/CAREER/HBA2/DS/Final_Project/ROC.Rmd")
knit_with_parameters("~/Library/CloudStorage/GoogleDrive-zzrthebeast@gmail.com/My Drive/CAREER/HBA2/DS/Final_Project/ROC.Rmd")
knit_with_parameters("~/Library/CloudStorage/GoogleDrive-zzrthebeast@gmail.com/My Drive/CAREER/HBA2/DS/Final_Project/ROC.Rmd")
knit_with_parameters("~/Library/CloudStorage/GoogleDrive-zzrthebeast@gmail.com/My Drive/CAREER/HBA2/DS/Final_Project/ROC.Rmd")
library(ROCR)
perf_knn <- performance(pred_knn, "tpr", "fpr")
perf_rf <- performance(pred_rf, "tpr", "fpr")
perf_logistic <- performance(pred_logistic, "tpr", "fpr")
perf_svm <- performance(pred_svm, "tpr", "fpr")
auc_knn <- performance(pred_knn, measure = "auc")@y.values[[1]]
auc_rf <- performance(pred_rf, measure = "auc")@y.values[[1]]
auc_logistic <- performance(pred_logistic, measure = "auc")@y.values[[1]]
auc_svm <- performance(pred_svm, measure = "auc")@y.values[[1]]
plot(perf_knn, col = "red")
plot(perf_rf, col = "blue", add = TRUE)
plot(perf_logistic, col = "black", add = TRUE)
plot(perf_svm, col = "grey", add = TRUE)
legend("bottomright", legend = c("knn", "random forest", "logistic", "svm"),
col = c("red", "blue", "black", "grey"), lty = 1)
text(x = 0.3, y = 0.4, labels = paste("AUC-knn =", round(auc_knn, 2)), col = "red")
text(x = 0.3, y = 0.3, labels = paste("AUC-random forest =", round(auc_rf, 2)), col = "blue")
text(x = 0.3, y = 0.2, labels = paste("AUC-logistic =", round(auc_logistic, 2)), col = "black")
text(x = 0.3, y = 0.1, labels = paste("AUC-svm =", round(auc_svm, 2)), col = "grey")
library(ROCR)
perf_knn <- performance(pred_knn, "tpr", "fpr")
perf_rf <- performance(pred_rf, "tpr", "fpr")
perf_logistic <- performance(pred_logistic, "tpr", "fpr")
perf_svm <- performance(pred_svm, "tpr", "fpr")
auc_knn <- performance(pred_knn, measure = "auc")@y.values[[1]]
auc_rf <- performance(pred_rf, measure = "auc")@y.values[[1]]
auc_logistic <- performance(pred_logistic, measure = "auc")@y.values[[1]]
auc_svm <- performance(pred_svm, measure = "auc")@y.values[[1]]
plot(perf_knn, col = "red")
plot(perf_rf, col = "blue", add = TRUE)
plot(perf_logistic, col = "black", add = TRUE)
plot(perf_svm, col = "grey", add = TRUE)
legend("bottomright", legend = c("knn", "random forest", "logistic", "svm"),
col = c("red", "blue", "black", "grey"), lty = 1)
text(x = 0.3, y = 0.4, labels = paste("AUC-knn =", round(auc_knn, 2)), col = "red")
text(x = 0.3, y = 0.3, labels = paste("AUC-random forest =", round(auc_rf, 2)), col = "blue")
text(x = 0.3, y = 0.2, labels = paste("AUC-logistic =", round(auc_logistic, 2)), col = "black")
text(x = 0.3, y = 0.1, labels = paste("AUC-svm =", round(auc_svm, 2)), col = "grey")
library(ROCR)
perf_knn <- performance(pred_knn, "tpr", "fpr")
perf_rf <- performance(pred_rf, "tpr", "fpr")
perf_logistic <- performance(pred_logistic, "tpr", "fpr")
perf_svm <- performance(pred_svm, "tpr", "fpr")
auc_knn <- performance(pred_knn, measure = "auc")@y.values[[1]]
auc_rf <- performance(pred_rf, measure = "auc")@y.values[[1]]
auc_logistic <- performance(pred_logistic, measure = "auc")@y.values[[1]]
auc_svm <- performance(pred_svm, measure = "auc")@y.values[[1]]
plot(perf_knn, col = "red")
plot(perf_rf, col = "blue", add = TRUE)
plot(perf_logistic, col = "black", add = TRUE)
plot(perf_svm, col = "grey", add = TRUE)
legend("bottomright", legend = c("knn", "random forest", "logistic", "svm"),
col = c("red", "blue", "black", "grey"), lty = 1)
text(x = 0.3, y = 0.4, labels = paste("AUC-knn =", round(auc_knn, 2)), col = "red")
text(x = 0.3, y = 0.3, labels = paste("AUC-random forest =", round(auc_rf, 2)), col = "blue")
text(x = 0.3, y = 0.2, labels = paste("AUC-logistic =", round(auc_logistic, 2)), col = "black")
text(x = 0.3, y = 0.1, labels = paste("AUC-svm =", round(auc_svm, 2)), col = "grey")
library(randomForest)
rfCreditRiskModel <- randomForest(loan_status ~ -loan_percent_income., data = train_set)
library(randomForest)
rfCreditRiskModel <- randomForest(loan_status ~ -loan_percent_income, data = train_set)
library(randomForest)
rfCreditRiskModel <- randomForest(loan_status ~ ., data = train_set)
predProbs <- predict(rfCreditRiskModel, test_set, type = "prob")[,1]
predictions = ifelse(predProbs > 0.5, 1, 0)
print(rfCreditRiskModel)
print(nrow(predictions))
split_index <- sample(1:nrow(creditRiskData), 0.8 * nrow(creditRiskData))
train_set <- creditRiskData[split_index, ]
train_set = subset(train_set, select = -loan_percent_income)
test_set <- creditRiskData[-split_index, ]
test_set = subset(test_set, select = -loan_percent_income)
library(randomForest)
rfCreditRiskModel <- randomForest(loan_status ~ ., data = train_set)
predProbs <- predict(rfCreditRiskModel, test_set, type = "prob")[,1]
predictions = ifelse(predProbs > 0.5, 1, 0)
print(rfCreditRiskModel)
print(nrow(predictions))
# building the confusion matrix
library(caret)
conf_matrix <- confusionMatrix(as.factor(predictions), as.factor(test_set$loan_status), positive = "1")
print(conf_matrix)
pred = prediction(predProbs, test_set$loan_status)
pred_rf = pred
roc_obj = performance(pred, measure = "tpr", x.measure = "fpr")
auc_obj = performance(pred, measure = "auc")
plot(roc_obj, main = paste("Area under the curve:", round(auc_obj@y.values[[1]], 2)))
training <- sample(1:num_rows, 0.8 * num_rows, replace=FALSE)
trainingSet <- subset(creditData[training, ])
trainingSet = subset(creditData[trainingSet, select = -loan_percent_income])
training <- sample(1:num_rows, 0.8 * num_rows, replace=FALSE)
trainingSet <- subset(creditData[training, ])
trainingSet = subset(trainingSet, select = -loan_percent_income)
testing <- setdiff(1:num_rows,training)
testingSet <- subset(creditData[testing, ])
testingSet = subset(testingSet, select = -loan_percent_income)
trainingSet$loan_status <- as.factor(trainingSet$loan_status)
testingSet$loan_status <- as.factor(testingSet$loan_status)
svmModel <- svm(loan_status ~., data = trainingSet, kernel = "linear", cost = 20, probability = TRUE)
print(svmModel)
training <- sample(1:num_rows, 0.8 * num_rows, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_rows,training)
testingSet <- subset(creditData[testing, ])
trainingSet$loan_status <- as.factor(trainingSet$loan_status)
testingSet$loan_status <- as.factor(testingSet$loan_status)
svmModel <- svm(loan_status ~., data = trainingSet, kernel = "linear", cost = 20, probability = TRUE)
