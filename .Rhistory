creditData$loan_grade <- factor(creditData$loan_grade)
creditData$cb_person_default_on_file <- factor(creditData$cb_person_default_on_file)
print(head(creditData))
library(dplyr)
home_ownership_types <- creditData %>%
count(person_home_ownership)
print(home_ownership_types)
loan_intent <- creditData %>%
count(loan_intent)
print(loan_intent)
loan_grade <- creditData %>%
count(loan_grade)
print(loan_grade)
cb_person_default_on_file <- creditData %>%
count(cb_person_default_on_file)
print(cb_person_default_on_file)
## KNN
## loan status is Y
summary (creditData$person_home_ownership)
creditData$cb_person_default_on_file <- ifelse(creditData$cb_person_default_on_file == "Y", 1, 0)
install.packages("dummy")
library(dummy)
# creating dummy variables
temp_ownership <- data.frame(person_home_ownership = creditData$person_home_ownership)
creditData <- cbind(creditData, dummy(temp_ownership))
creditData <- subset(creditData, select = -person_home_ownership)
temp_intent <- data.frame(intent = creditData$loan_intent)
creditData <- cbind(creditData, dummy(temp_intent))
creditData <- subset(creditData, select = -loan_intent)
temp_grade <- data.frame(grade = creditData$loan_grade)
creditData <- cbind(creditData, dummy(temp_grade))
creditData <- subset(creditData, select = -loan_grade)
creditData <- as.data.frame(sapply(creditData, function(x) as.numeric(as.character(x))))
creditData <- creditData
cor(creditData)
head(creditData)
library(FNN)
bestK = 0
minerrors = Inf
pb <- txtProgressBar(min = 0, max = 10, style = 3)
for(iter in 60:70)
{
AllErrors=numeric(50)
for(fold in 1:10)
{
#Get Training at Testing sets
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
# Get the features of the training set
trainingfeatures <- subset(trainingSet, select=c(-cb_person_default_on_file))
# Get the labels of the training set
traininglabels <- trainingSet$cb_person_default_on_file
# Get the features of the testing set
testingfeatures <- subset(testingSet, select=c(-cb_person_default_on_file))
sizeTestSet = dim(testingSet)[1]
predictions = knn.reg(trainingfeatures,testingfeatures,traininglabels,k=iter)
error = sum(predictions$pred != testingSet$cb_person_default_on_file)
mis_rate=error/sizeTestSet
AllErrors[fold] = mis_rate
}
setTxtProgressBar(pb, iter)
currError = mean(AllErrors)
if (currError < minerrors){
bestK = iter
minerrors = currError
}
}
options(repos = c(CRAN = "https://cloud.r-project.org/"))
set.seed(1)
creditData=na.omit(read.csv ("credit_risk_dataset.csv", header = TRUE))
head(creditData)
library(dplyr)
home_ownership_types <- creditData %>%
count(person_home_ownership)
print(home_ownership_types)
loan_intent <- creditData %>%
count(loan_intent)
print(loan_intent)
loan_grade <- creditData %>%
count(loan_grade)
print(loan_grade)
cb_person_default_on_file <- creditData %>%
count(cb_person_default_on_file)
print(cb_person_default_on_file)
## KNN
## loan status is Y
summary (creditData$person_home_ownership)
creditData$cb_person_default_on_file <- ifelse(creditData$cb_person_default_on_file == "Y", 1, 0)
install.packages("dummy")
library(dummy)
# creating dummy variables
temp_ownership <- data.frame(person_home_ownership = creditData$person_home_ownership)
creditData <- cbind(creditData, dummy(temp_ownership))
creditData <- subset(creditData, select = -person_home_ownership)
temp_intent <- data.frame(intent = creditData$loan_intent)
creditData <- cbind(creditData, dummy(temp_intent))
creditData <- subset(creditData, select = -loan_intent)
temp_grade <- data.frame(grade = creditData$loan_grade)
creditData <- cbind(creditData, dummy(temp_grade))
creditData <- subset(creditData, select = -loan_grade)
creditData <- as.data.frame(sapply(creditData, function(x) as.numeric(as.character(x))))
creditData <- creditData
# normalizing the data
creditData$person_age = (creditData$person_age-mean(creditData$person_age))/sd(creditData$person_age)
creditData$person_income = (creditData$person_income - mean(creditData$person_income))/sd(creditData$person_income)
creditData$person_emp_length = (creditData$person_emp_length - mean(creditData$person_emp_length))/sd(creditData$person_emp_length)
creditData$loan_amnt = (creditData$loan_amnt - mean(creditData$loan_amnt))/sd(creditData$loan_amnt)
creditData$loan_int_rate = (creditData$loan_int_rate - mean(creditData$loan_int_rate))/sd(creditData$loan_int_rate)
creditData$cb_person_cred_hist_length = (creditData$cb_person_cred_hist_length - mean(creditData$cb_person_cred_hist_length))/sd(creditData$cb_person_cred_hist_length)
num_samples = dim(creditData)[1]
training=sample(1:num_samples,0.8*num_samples,replace=FALSE)
trainingsSet=subset(creditData[training,])
testing = setdiff(1:num_samples, training)
testingSet = subset(creditData[testing, ])
trainingfeature = subset (trainingsSet, select=c(-cb_person_default_on_file))
traininglabel =trainingsSet$cb_person_default_on_file
testingfeature = subset (testingSet, select=c(-cb_person_default_on_file))
install.packages("class")
library (class)
predictionLabels=knn(trainingfeature,testingfeature, traininglabel, k=1)
head(predictionLabels)
print(class(predictionLabels))
head(testingSet$cb_person_default_on_file)
sizeTestSet = dim(testingSet)[1]
error = sum(predictionLabels!=testingSet$cb_person_default_on_file)
mis_rate=error/sizeTestSet
print(mis_rate)
library(FNN)
bestK = 0
minerrors = Inf
pb <- txtProgressBar(min = 0, max = 10, style = 3)
for(iter in 60:70)
{
AllErrors=numeric(50)
for(fold in 1:10)
{
#Get Training at Testing sets
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
# Get the features of the training set
trainingfeatures <- subset(trainingSet, select=c(-cb_person_default_on_file))
# Get the labels of the training set
traininglabels <- trainingSet$cb_person_default_on_file
# Get the features of the testing set
testingfeatures <- subset(testingSet, select=c(-cb_person_default_on_file))
sizeTestSet = dim(testingSet)[1]
predictions = knn.reg(trainingfeatures,testingfeatures,traininglabels,k=iter)
error = sum(predictions$pred != testingSet$cb_person_default_on_file)
mis_rate=error/sizeTestSet
AllErrors[fold] = mis_rate
}
setTxtProgressBar(pb, iter)
currError = mean(AllErrors)
if (currError < minerrors){
bestK = iter
minerrors = currError
}
}
library(FNN)
bestK <- 0
minerrors <- Inf
pbcount <- 0
pb <- txtProgressBar(min = 0, max = 100, style = 3)
for(iter in 60:70)
{
AllErrors=numeric(50)
for(fold in 1:10)
{
#Get Training at Testing sets
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
# Get the features of the training set
trainingfeatures <- subset(trainingSet, select=c(-cb_person_default_on_file))
# Get the labels of the training set
traininglabels <- trainingSet$cb_person_default_on_file
# Get the features of the testing set
testingfeatures <- subset(testingSet, select=c(-cb_person_default_on_file))
sizeTestSet = dim(testingSet)[1]
predictions = knn.reg(trainingfeatures,testingfeatures,traininglabels,k=iter)
error = sum(predictions$pred != testingSet$cb_person_default_on_file)
mis_rate=error/sizeTestSet
AllErrors[fold] = mis_rate
pbcount <- pbcount + 1
setTxtProgressBar(pb, pbcount)
}
currError = mean(AllErrors)
if (currError < minerrors){
bestK = iter
minerrors = currError
}
}
close(pb)
print(bestK)
library(FNN)
bestK <- 0
minerrors <- Inf
# Initialize the progress bar
pbcount <- 0
pb <- txtProgressBar(min = 0, max = 100, style = 3)
for(iter in 55:65)
{
AllErrors=numeric(50)
for(fold in 1:10)
{
#Get Training at Testing sets
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
# Get the features of the training set
trainingfeatures <- subset(trainingSet, select=c(-cb_person_default_on_file))
# Get the labels of the training set
traininglabels <- trainingSet$cb_person_default_on_file
# Get the features of the testing set
testingfeatures <- subset(testingSet, select=c(-cb_person_default_on_file))
sizeTestSet = dim(testingSet)[1]
predictions = knn.reg(trainingfeatures,testingfeatures,traininglabels,k=iter)
error = sum(predictions$pred != testingSet$cb_person_default_on_file)
mis_rate=error/sizeTestSet
AllErrors[fold] = mis_rate
# Setting the progress bar
pbcount <- pbcount + 1
setTxtProgressBar(pb, pbcount)
}
currError = mean(AllErrors)
if (currError < minerrors){
bestK = iter
minerrors = currError
}
}
close(pb)
print(bestK)
options(repos = c(CRAN = "https://cloud.r-project.org/"))
set.seed(43)
creditRiskData = read.csv("credit_risk_dataset.csv")
library(dplyr)
home_ownership_types <- creditRiskData %>%
count(person_home_ownership)
print(home_ownership_types)
creditRiskData$loan_status <- factor(creditRiskData$loan_status, levels = c(0, 1))
split_index <- sample(1:nrow(creditRiskData), 0.8 * nrow(creditRiskData))
train_set <- na.omit(creditRiskData[split_index, ])
test_set <- na.omit(creditRiskData[-split_index, ])
install.packages("randomForest")
library(randomForest)
rfCreditRiskModel <- randomForest( loan_status ~ ., data = train_set)
predictions <- predict(rfCreditRiskModel, test_set)
print(rfCreditRiskModel)
library(FNN)
bestK <- 0
minerrors <- Inf
# Initialize the progress bar
pbcount <- 0
pb <- txtProgressBar(min = 0, max = 100, style = 3)
for(iter in 55:65)
{
AllErrors=numeric(50)
for(fold in 1:10)
{
#Get Training at Testing sets
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
# Get the features of the training set
trainingfeatures <- subset(trainingSet, select=c(-cb_person_default_on_file))
# Get the labels of the training set
traininglabels <- trainingSet$cb_person_default_on_file
# Get the features of the testing set
testingfeatures <- subset(testingSet, select=c(-cb_person_default_on_file))
sizeTestSet = dim(testingSet)[1]
predictions = knn.reg(trainingfeatures,testingfeatures,traininglabels,k=iter)
error = sum(predictions$pred != testingSet$cb_person_default_on_file)
mis_rate=error/sizeTestSet
AllErrors[fold] = mis_rate
# Setting the progress bar
pbcount <- pbcount + 1
setTxtProgressBar(pb, pbcount)
}
currError = mean(AllErrors)
if (currError < minerrors){
bestK = iter
minerrors = currError
}
}
close(pb)
print(bestK)
options(repos = c(CRAN = "https://cloud.r-project.org/"))
set.seed(43)
creditRiskData = read.csv("credit_risk_dataset.csv")
print(nrow(creditRiskData))
options(repos = c(CRAN = "https://cloud.r-project.org/"))
set.seed(43)
creditRiskData = na.omit(read.csv("credit_risk_dataset.csv"))
print(nrow(creditRiskData))
install.packages("randomForest")
library(randomForest)
rfCreditRiskModel <- randomForest( loan_status ~ ., data = train_set)
install.packages("randomForest")
library(randomForest)
rfCreditRiskModel <- randomForest( loan_status ~ ., data = train_set)
predictions <- predict(rfCreditRiskModel, test_set)
print(rfCreditRiskModel)
print(head(predictions))
library(e1071)
options(repos = c(CRAN = "https://cloud.r-project.org/"))
set.seed(1)
creditData=na.omit(read.csv ("credit_risk_dataset.csv", header = TRUE))
num_samples = dim(creditData)[1]
creditData$person_home_ownership <- factor(creditData$person_home_ownership)
creditData$loan_intent <- factor(creditData$loan_intent)
creditData$loan_grade <- factor(creditData$loan_grade)
creditData$cb_person_default_on_file <- factor(creditData$cb_person_default_on_file)
creditData$cb_person_default_on_file <- ifelse(creditData$cb_person_default_on_file == "Y", 1, 0)
print(head(creditData))
library(dplyr)
home_ownership_types <- creditData %>%
count(person_home_ownership)
print(home_ownership_types)
loan_intent <- creditData %>%
count(loan_intent)
print(loan_intent)
loan_grade <- creditData %>%
count(loan_grade)
print(loan_grade)
cb_person_default_on_file <- creditData %>%
count(cb_person_default_on_file)
print(cb_person_default_on_file)
## KNN
## loan status is Y
summary (creditData$person_home_ownership)
creditData$cb_person_default_on_file <- ifelse(creditData$cb_person_default_on_file == "Y", 1, 0)
library(dummy)
# creating dummy variables
temp_ownership <- data.frame(person_home_ownership = creditData$person_home_ownership)
creditData <- cbind(creditData, dummy(temp_ownership))
creditData <- subset(creditData, select = -person_home_ownership)
temp_intent <- data.frame(intent = creditData$loan_intent)
creditData <- cbind(creditData, dummy(temp_intent))
creditData <- subset(creditData, select = -loan_intent)
temp_grade <- data.frame(grade = creditData$loan_grade)
creditData <- cbind(creditData, dummy(temp_grade))
creditData <- subset(creditData, select = -loan_grade)
creditData <- as.data.frame(sapply(creditData, function(x) as.numeric(as.character(x))))
creditData <- creditData
cor(creditData)
head(creditData)
library(dplyr)
home_ownership_types <- creditData %>%
count(person_home_ownership)
library(e1071)
options(repos = c(CRAN = "https://cloud.r-project.org/"))
set.seed(1)
creditData=na.omit(read.csv ("credit_risk_dataset.csv", header = TRUE))
num_samples = dim(creditData)[1]
creditData$person_home_ownership <- factor(creditData$person_home_ownership)
creditData$loan_intent <- factor(creditData$loan_intent)
creditData$loan_grade <- factor(creditData$loan_grade)
creditData$cb_person_default_on_file <- factor(creditData$cb_person_default_on_file)
creditData$cb_person_default_on_file <- ifelse(creditData$cb_person_default_on_file == "Y", 1, 0)
print(head(creditData))
library(dplyr)
home_ownership_types <- creditData %>%
count(person_home_ownership)
print(home_ownership_types)
loan_intent <- creditData %>%
count(loan_intent)
print(loan_intent)
loan_grade <- creditData %>%
count(loan_grade)
print(loan_grade)
cb_person_default_on_file <- creditData %>%
count(cb_person_default_on_file)
print(cb_person_default_on_file)
## KNN
## loan status is Y
summary (creditData$person_home_ownership)
creditData$cb_person_default_on_file <- ifelse(creditData$cb_person_default_on_file == "Y", 1, 0)
library(dummy)
# creating dummy variables
temp_ownership <- data.frame(person_home_ownership = creditData$person_home_ownership)
creditData <- cbind(creditData, dummy(temp_ownership))
creditData <- subset(creditData, select = -person_home_ownership)
temp_intent <- data.frame(intent = creditData$loan_intent)
creditData <- cbind(creditData, dummy(temp_intent))
creditData <- subset(creditData, select = -loan_intent)
temp_grade <- data.frame(grade = creditData$loan_grade)
creditData <- cbind(creditData, dummy(temp_grade))
creditData <- subset(creditData, select = -loan_grade)
creditData <- as.data.frame(sapply(creditData, function(x) as.numeric(as.character(x))))
creditData <- creditData
cor(creditData)
print(creditData)
library(dplyr)
home_ownership_types <- creditData %>%
count(person_home_ownership)
library(e1071)
options(repos = c(CRAN = "https://cloud.r-project.org/"))
set.seed(1)
creditData=na.omit(read.csv ("credit_risk_dataset.csv", header = TRUE))
num_samples = dim(creditData)[1]
creditData$person_home_ownership <- factor(creditData$person_home_ownership)
creditData$loan_intent <- factor(creditData$loan_intent)
creditData$loan_grade <- factor(creditData$loan_grade)
creditData$cb_person_default_on_file <- factor(creditData$cb_person_default_on_file)
creditData$cb_person_default_on_file <- ifelse(creditData$cb_person_default_on_file == "Y", 1, 0)
print(head(creditData))
library(dplyr)
home_ownership_types <- creditData %>%
count(person_home_ownership)
print(home_ownership_types)
loan_intent <- creditData %>%
count(loan_intent)
print(loan_intent)
loan_grade <- creditData %>%
count(loan_grade)
print(loan_grade)
cb_person_default_on_file <- creditData %>%
count(cb_person_default_on_file)
print(cb_person_default_on_file)
## KNN
## loan status is Y
summary (creditData$person_home_ownership)
library(dummy)
# creating dummy variables
temp_ownership <- data.frame(person_home_ownership = creditData$person_home_ownership)
creditData <- cbind(creditData, dummy(temp_ownership))
creditData <- subset(creditData, select = -person_home_ownership)
temp_intent <- data.frame(intent = creditData$loan_intent)
creditData <- cbind(creditData, dummy(temp_intent))
creditData <- subset(creditData, select = -loan_intent)
temp_grade <- data.frame(grade = creditData$loan_grade)
creditData <- cbind(creditData, dummy(temp_grade))
creditData <- subset(creditData, select = -loan_grade)
creditData <- as.data.frame(sapply(creditData, function(x) as.numeric(as.character(x))))
creditData <- creditData
cor(creditData)
print(creditData)
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
svmModel <- svm(loan_status ~., data = trainingSet)
predictLabels <- predict (svmModel, testingSet)
print(svmModel)
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
svmModel <- svm(loan_status ~., data = trainingSet)
predictLabels <- predict (svmModel, testingSet)
print(svmModel)
print(predictLabels)
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
svmModel <- svm(loan_status ~., data = trainingSet)
predictLabels <- predict (svmModel, testingSet)
print(svmModel)
error = sum(predictLabels!=testingSet$loan_status)
mis_rate=error/num_samples
print(mis_rate)
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
svmModel <- svm(loan_status ~., data = trainingSet, )
predictLabels <- predict (svmModel, testingSet, kernel = linear, cost = 20)
print(svmModel)
error = sum(predictLabels!=testingSet$loan_status)
mis_rate=error/num_samples
print(mis_rate)
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
svmModel <- svm(loan_status ~., data = trainingSet, )
predictLabels <- predict (svmModel, testingSet, kernel = linear, cost = 20)
print(svmModel)
error = sum(predictLabels!=testingSet$loan_status)
mis_rate=error/num_samples
accuracy = 1- mis_rate
print(accuracy)
library(caret)
conf_matrix <- confusionMatrix(as.factor(predictLabels), as.factor(test_set$loan_status), positive = "1")
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
svmModel <- svm(loan_status ~., data = trainingSet, )
predictLabels <- predict (svmModel, testingSet, kernel = linear, cost = 20)
print(svmModel)
print(nrow(predictlabels))
training <- sample(1:num_samples, 0.8 * num_samples, replace=FALSE)
trainingSet <- subset(creditData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(creditData[testing, ])
svmModel <- svm(loan_status ~., data = trainingSet, )
predictLabels <- predict (svmModel, testingSet, kernel = linear, cost = 20)
print(svmModel)
print(nrow(predictLabels))
error = sum(predictLabels!=testingSet$loan_status)
mis_rate=error/num_samples
accuracy = 1- mis_rate
print(accuracy)
